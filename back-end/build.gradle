plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.apple'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	//	ORM 라이브러리 : Java로 데이터 입출력 가능함
	//	//	속도는 약간 저하됨
	//	JPA : Java의 ORM 표준 문법
	//	Hibernate : JPA 쓰기 좋게 구현한 것
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'mysql:mysql-connector-java:8.0.26'
	//	runtimeOnly는 컴파일할때는 필요없는 라이브러리에 달아주는 것
	//	implementation은 컴파일할때부터 사용되는 라이브러리다.

// 생산성이 좋아지기 때문에 lombok을 쓰는 회사가 많다
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

//// Spring Security 라이브러리임 ( 로그인 기능 구현을 위해 추가 )
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'

// 세션 데이터 DB에 저장하게 해주는 라이브러리임
// 근데 여기서 끝이 아니고 application.properties에도 추가 설정이 필요하고
// 세션 데이터용 테이블도 DB에 하나 만들어줘야함
//	이러면 DB에 세션 데이터가 자동으로 보관됨
//	implementation 'org.springframework.session:spring-session-jdbc'

	// AWS S3 bucket 라이브러리 (AWS 이미지 업로드 할때 사용할 것임)
	// application.properties에도 설정 추가해줘야 함

	// 엑세스키 시크릿키 버킷이름 등
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1'

	// presigned URL방식으로 S3 버킷에 이미지 업로드

	// JWT 쉽게 사용하기 위한 라이브러리
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// maven to Gradle
	implementation 'org.json:json:20230227' // org.json 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-webflux' // WebClient 사용

}
// 라이브러리를 설치하거나 제거하면 서버를 끄고 다시 실행시켜야 적용된다.
// 라이브러리 추가하면 화면에 코끼리 모양 버튼 나타나는데 그거 누르면 됨

tasks.named('test') {
	useJUnitPlatform()
}
